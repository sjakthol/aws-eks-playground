AWSTemplateFormatVersion: 2010-09-09
Description: EKS Playground - IAM Roles for Pods (IAM Roles Service Accounts)
Parameters:
  StackNamePrefix:
    Description: A prefix for the stacks in this setup.
    Type: String

  OIDCIssuerUrl:
    Description: URL for OIDC Provider
    Type: String

  OIDCIssuerThumbprint:
    Description: Thumbprint for OIDC provider
    Type: String

Resources:
  OIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList:
        - sts.amazonaws.com
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-OIDCProvider' }
      ThumbprintList:
        - !Ref OIDCIssuerThumbprint
      Url: !Ref OIDCIssuerUrl

  VpcCniPluginRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AllowEksAuthToAssumeRoleForPodIdentity
          Effect: Allow
          Principal:
            Service: pods.eks.amazonaws.com
          Action:
            - sts:AssumeRole
            - sts:TagSession
          Condition:
            StringEquals:
              aws:SourceOrgId: "${aws:ResourceOrgId}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  VpcCniPluginRoleAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Sub ${StackNamePrefix}-eks-cluster
      Namespace: kube-system
      RoleArn: !GetAtt VpcCniPluginRole.Arn
      ServiceAccount: aws-node
      Tags:
      - { Key: Name, Value: !Sub "${AWS::StackName}-VpcCniPluginRoleAssociation" }

  ClusterAutoscalerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AllowEksAuthToAssumeRoleForPodIdentity
          Effect: Allow
          Principal:
            Service: pods.eks.amazonaws.com
          Action:
            - sts:AssumeRole
            - sts:TagSession
          Condition:
            StringEquals:
              aws:SourceOrgId: "${aws:ResourceOrgId}"
      Policies:
      - PolicyName: K8SClusterAutoscalerPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowReadOnlyActions
              Effect: Allow
              Action:
                - autoscaling:DescribeAutoScalingGroups
                - autoscaling:DescribeAutoScalingInstances
                - autoscaling:DescribeLaunchConfigurations
                - autoscaling:DescribeScalingActivities
                - ec2:DescribeImages
                - ec2:DescribeInstanceTypes
                - ec2:DescribeLaunchTemplateVersions
                - ec2:GetInstanceTypesFromInstanceRequirements
                - eks:DescribeNodegroup
              Resource: "*"
            - Sid: AllowASGManagement
              Effect: Allow
              Action:
                - autoscaling:SetDesiredCapacity
                - autoscaling:TerminateInstanceInAutoScalingGroup
              Resource:
                - !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/eks-*
              Condition:
                StringEquals:
                  aws:ResourceTag/eks:cluster-name: !Sub ${StackNamePrefix}-eks-cluster

  ClusterAutoscalerRoleAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Sub ${StackNamePrefix}-eks-cluster
      Namespace: kube-system
      RoleArn: !GetAtt ClusterAutoscalerRole.Arn
      ServiceAccount: cluster-autoscaler
      Tags:
      - { Key: Name, Value: !Sub "${AWS::StackName}-ClusterAutoscalerRoleAssociation" }

  SparkRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": { "Federated": "arn:${AWS::Partition}:iam::${AWS::AccountId}:oidc-provider/${OIDCProviderId}" },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "${OIDCProviderId}:sub": "system:serviceaccount:default:spark"
                }
              }
            }]
          }
        - OIDCProviderId: !Select [1, !Split ['oidc-provider/', !Ref OIDCProvider]]
      RoleName: !Sub ${AWS::StackName}-spark-role
      Policies:
      - PolicyName: SparkDataAccessPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AccessToNotebookBucket
              Effect: Allow
              Action:
                - s3:ListBucket
                - s3:DeleteObject
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub 'arn:aws:s3:::${StackNamePrefix}-spark-jupyter-notebooks'
                - !Sub 'arn:aws:s3:::${StackNamePrefix}-spark-jupyter-notebooks/*'
            - Sid: AccessToSampleDataBuckets
              Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - 'arn:aws:s3:::amazon-reviews-pds'
                - 'arn:aws:s3:::amazon-reviews-pds/*'
                - 'arn:aws:s3:::ew1-infra-trail'
                - 'arn:aws:s3:::ew1-infra-trail/*'

Outputs:
  OIDCProviderArn:
    Value: !Ref OIDCProvider
  OIDCProviderId:
    Value: !Select [1, !Split ['oidc-provider/', !Ref OIDCProvider]]

  VpcCniPluginRoleArn:
    Value: !GetAtt VpcCniPluginRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-VpcCniPluginRoleArn
